import streamlit as st
import shap
import matplotlib.pyplot as plt
import numpy as np
import pickle

# Load model and vectorizer
model = pickle.load(open("model.pkl", "rb"))
vectorizer = pickle.load(open("vectorizer.pkl", "rb"))

st.title("ðŸ©º Healthcare Document Classifier with SHAP")

# Text input
user_input = st.text_area("Enter Medical Abstract:", height=200)

if user_input:
    # Vectorize the user input
    input_vector = vectorizer.transform([user_input])
    
    # Predict
    prediction = model.predict(input_vector)[0]
    probabilities = model.predict_proba(input_vector)[0]
    
    st.markdown(f"### ðŸ§¾ Predicted Condition: `{prediction}`")
    
    # Show probabilities
    st.bar_chart(probabilities)

    # SHAP Explanation
    st.markdown("### ðŸ§  SHAP Explanation (Top Features)")
    
    # Use small background sample for SHAP
    background_texts = [
        "Patient has shortness of breath and cough.",
        "History of hypertension and stroke.",
        "The patient is experiencing chest pain.",
        "Diabetic patient with blurred vision and fatigue.",
        "Individual complains of severe headache and dizziness."
    ]
    background_vectors = vectorizer.transform(background_texts)

    # Use KernelExplainer with vectorized background
    def predict_proba_fn(X):
        return model.predict_proba(X)

    explainer = shap.KernelExplainer(predict_proba_fn, background_vectors)

    # Explain the user input vector
    shap_values = explainer.shap_values(input_vector, nsamples=100)

    # Get feature names
    feature_names = vectorizer.get_feature_names_out()
    input_vector_array = input_vector.toarray()

    # Plot SHAP summary
    plt.figure()
    shap.summary_plot(shap_values, input_vector_array, feature_names=feature_names, plot_type="bar", show=False)
    st.pyplot(plt.gcf())
